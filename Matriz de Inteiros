#include<stdio.h>
#include<stdlib.h>

int calculaQtdLinhas(int qtdLinhas){
    FILE *arq;
    arq= fopen("entrada.txt","r");
    
    char ch;
    qtdLinhas=1;
    while((ch=fgetc(arq))!= EOF)
    {
        if(ch == '\n')
        {
            qtdLinhas++;
        }
        
    }
    fclose(arq);
    return qtdLinhas;
}

int calculaQtdElementos(int qtdLinhas, int qtdElementos){
    FILE *arq;
    arq= fopen("entrada.txt","r");
    
    char ch;
    while((ch=fgetc(arq))!= EOF)
    {
        if(ch == ' ')
        {
            qtdElementos++;
        }
        
    }
    qtdElementos += qtdLinhas;
    fclose(arq);
    return qtdElementos;
}

int calculaQtdColunas(int qtdLinhas, int qtdElementos, int qtdColunas){
    if(qtdElementos > 0 && qtdLinhas > 0)
    {   
        float calculoColunas;
        calculoColunas = qtdElementos/qtdLinhas;
        if(calculoColunas != (int)calculoColunas)
        {
            //Matriz inválida
            return 0;
        }
        else
        {
            qtdColunas = (int)calculoColunas;    
        }
    }
    return qtdColunas;
}


int validaMatriz(int qtdLinhas, int qtdElementos, int qtdColunas){
    if(qtdElementos > 0 && qtdLinhas > 0)
    {   
        float calculoColunas;
        calculoColunas = qtdElementos/qtdLinhas;
        if(calculoColunas != (int)calculoColunas)
        {
            printf("Matriz Inválida!");
            return 0;
        }
        if(qtdLinhas % 2 != 0)
        {
            printf("O numero de linhas da matriz deve ser par!");
            return 0;
        }
        if(qtdColunas % 2 != 0)
        {
            printf("O numero de colunas da matriz deve ser par!");
            return 0;
        }
    }
    return 1;
}

int preencheMatrizComArquivo (FILE *arq, int qtdLinhas, int qtdColunas, int matriz[qtdLinhas][qtdColunas]){
    int i,j;

    arq= fopen("entrada.txt","r");
    while(!feof(arq))
    {
        for(i=0;i<6;i++)
        {
            for(j=0;j<4;j++)
            {
                fscanf(arq,"%d",&matriz[i][j]);
            }
        }
    }
    fclose(arq);
}

void imprimeMatriz (int qtdLinhas, int qtdColunas, int matriz[qtdLinhas][qtdColunas]){
    int i=0, j=0;
    for(i=0;i<qtdLinhas;i++)
    {
        for(j=0;j<qtdColunas;j++)
        {
            printf("%d ",matriz[i][j]);
        }
        printf("\n");
    }
}

void geraArquivoComMatrizFinal (FILE *arqFinal, int qtdLinhas, int qtdColunas, int matriz[qtdLinhas][qtdColunas]){
    int i=0, j=0;

    arqFinal = fopen("saida.txt", "w");

    for (i=0; i<qtdLinhas; i++)
    {
       for (j=0; j<qtdColunas; j++)
        {
            if(i % 2 == 0 && j % 2 == 0)
            {
            //fputc(matriz[i][j], arqFinal);
            fprintf (arqFinal, "%d ", matriz[i][j]);
            }
        } 
        fputc('\n', arqFinal);
    }
    fclose(arqFinal);
}

void imprimeMatrizFinal (int qtdLinhas, int qtdColunas, int matriz[qtdLinhas][qtdColunas]){
    int i=0, j=0;
    for(i=0;i<qtdLinhas;i++)
    {
        for(j=0;j<qtdColunas;j++)
        {
            if(i % 2 == 0 && j % 2 == 0)
            {
                printf("%d ",matriz[i][j]);
            }
        }
        printf("\n");
    }
}

int main()
{
    int qtdLinhas = calculaQtdLinhas(qtdLinhas);
    int qtdElementos = calculaQtdElementos(qtdLinhas, qtdElementos);
    int qtdColunas = calculaQtdColunas(qtdLinhas, qtdElementos, qtdColunas);
    printf("%d/%d/%d\n\n", qtdLinhas, qtdElementos, qtdColunas);

    qtdLinhas = 6;
    qtdElementos = 24;
    qtdColunas = 4;

    int validacao = validaMatriz(qtdLinhas, qtdElementos, qtdColunas);
    if(validacao == 0)
    {
        return 0;
    }
    
    printf("%d/%d/%d\n\n", qtdLinhas, qtdElementos, qtdColunas);
    
    FILE *arq;
    
    //Preenche a Matriz Original
    int matriz[qtdLinhas][qtdColunas];
    matriz[qtdLinhas][qtdColunas] = preencheMatrizComArquivo(arq, qtdLinhas, qtdColunas, matriz);
    
    //Imprime a Matriz Original
    printf(":: MATRIZ ORIGINAL ::\n");
    imprimeMatriz(qtdLinhas, qtdColunas, matriz);
    printf(":::::::::::::::::::::\n");
    
    //Gera o arquivo com a Matriz de linhas e colunas 0 e pares
    FILE *arqFinal;
    geraArquivoComMatrizFinal(arqFinal, qtdLinhas, qtdColunas, matriz);
    
    //Imprime a Matriz Final
    printf(":: MATRIZ FINAL ::\n");
    imprimeMatrizFinal(qtdLinhas, qtdColunas, matriz);
    printf(":::::::::::::::::::::\n");

    return 0;
}
